/*
 * Generated by gdbus-codegen 2.54.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_BLUEZ_DEVICE1_H__
#define __ORG_BLUEZ_DEVICE1_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Device1 */

#define BLUEZ_TYPE_DEVICE1 (bluez_device1_get_type ())
#define BLUEZ_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_DEVICE1, BluezDevice1))
#define BLUEZ_IS_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_DEVICE1))
#define BLUEZ_DEVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_TYPE_DEVICE1, BluezDevice1Iface))

struct _BluezDevice1;
typedef struct _BluezDevice1 BluezDevice1;
typedef struct _BluezDevice1Iface BluezDevice1Iface;

struct _BluezDevice1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel_pairing) (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect) (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect_profile) (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_disconnect) (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect_profile) (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_pair) (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_adapter) (BluezDevice1 *object);

  const gchar * (*get_address) (BluezDevice1 *object);

  const gchar * (*get_address_type) (BluezDevice1 *object);

  const gchar * (*get_alias) (BluezDevice1 *object);

  guint16  (*get_appearance) (BluezDevice1 *object);

  gboolean  (*get_blocked) (BluezDevice1 *object);

  guint  (*get_class) (BluezDevice1 *object);

  gboolean  (*get_connected) (BluezDevice1 *object);

  const gchar * (*get_icon) (BluezDevice1 *object);

  gboolean  (*get_legacy_pairing) (BluezDevice1 *object);

  GVariant * (*get_manufacturer_data) (BluezDevice1 *object);

  const gchar * (*get_modalias) (BluezDevice1 *object);

  const gchar * (*get_name) (BluezDevice1 *object);

  gboolean  (*get_paired) (BluezDevice1 *object);

  gint16  (*get_rssi) (BluezDevice1 *object);

  GVariant * (*get_service_data) (BluezDevice1 *object);

  gboolean  (*get_services_resolved) (BluezDevice1 *object);

  gboolean  (*get_trusted) (BluezDevice1 *object);

  gint16  (*get_tx_power) (BluezDevice1 *object);

  const gchar *const * (*get_uuids) (BluezDevice1 *object);

};

GType bluez_device1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_device1_interface_info (void);
guint bluez_device1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_device1_complete_disconnect (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void bluez_device1_complete_connect (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void bluez_device1_complete_connect_profile (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void bluez_device1_complete_disconnect_profile (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void bluez_device1_complete_pair (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void bluez_device1_complete_cancel_pairing (
    BluezDevice1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_device1_call_disconnect (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device1_call_disconnect_finish (
    BluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device1_call_disconnect_sync (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_device1_call_connect (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device1_call_connect_finish (
    BluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device1_call_connect_sync (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_device1_call_connect_profile (
    BluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device1_call_connect_profile_finish (
    BluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device1_call_connect_profile_sync (
    BluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void bluez_device1_call_disconnect_profile (
    BluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device1_call_disconnect_profile_finish (
    BluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device1_call_disconnect_profile_sync (
    BluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void bluez_device1_call_pair (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device1_call_pair_finish (
    BluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device1_call_pair_sync (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_device1_call_cancel_pairing (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device1_call_cancel_pairing_finish (
    BluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device1_call_cancel_pairing_sync (
    BluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *bluez_device1_get_address (BluezDevice1 *object);
gchar *bluez_device1_dup_address (BluezDevice1 *object);
void bluez_device1_set_address (BluezDevice1 *object, const gchar *value);

const gchar *bluez_device1_get_address_type (BluezDevice1 *object);
gchar *bluez_device1_dup_address_type (BluezDevice1 *object);
void bluez_device1_set_address_type (BluezDevice1 *object, const gchar *value);

const gchar *bluez_device1_get_name (BluezDevice1 *object);
gchar *bluez_device1_dup_name (BluezDevice1 *object);
void bluez_device1_set_name (BluezDevice1 *object, const gchar *value);

const gchar *bluez_device1_get_alias (BluezDevice1 *object);
gchar *bluez_device1_dup_alias (BluezDevice1 *object);
void bluez_device1_set_alias (BluezDevice1 *object, const gchar *value);

guint bluez_device1_get_class (BluezDevice1 *object);
void bluez_device1_set_class (BluezDevice1 *object, guint value);

guint16 bluez_device1_get_appearance (BluezDevice1 *object);
void bluez_device1_set_appearance (BluezDevice1 *object, guint16 value);

const gchar *bluez_device1_get_icon (BluezDevice1 *object);
gchar *bluez_device1_dup_icon (BluezDevice1 *object);
void bluez_device1_set_icon (BluezDevice1 *object, const gchar *value);

gboolean bluez_device1_get_paired (BluezDevice1 *object);
void bluez_device1_set_paired (BluezDevice1 *object, gboolean value);

gboolean bluez_device1_get_trusted (BluezDevice1 *object);
void bluez_device1_set_trusted (BluezDevice1 *object, gboolean value);

gboolean bluez_device1_get_blocked (BluezDevice1 *object);
void bluez_device1_set_blocked (BluezDevice1 *object, gboolean value);

gboolean bluez_device1_get_legacy_pairing (BluezDevice1 *object);
void bluez_device1_set_legacy_pairing (BluezDevice1 *object, gboolean value);

gint16 bluez_device1_get_rssi (BluezDevice1 *object);
void bluez_device1_set_rssi (BluezDevice1 *object, gint16 value);

gboolean bluez_device1_get_connected (BluezDevice1 *object);
void bluez_device1_set_connected (BluezDevice1 *object, gboolean value);

const gchar *const *bluez_device1_get_uuids (BluezDevice1 *object);
gchar **bluez_device1_dup_uuids (BluezDevice1 *object);
void bluez_device1_set_uuids (BluezDevice1 *object, const gchar *const *value);

const gchar *bluez_device1_get_modalias (BluezDevice1 *object);
gchar *bluez_device1_dup_modalias (BluezDevice1 *object);
void bluez_device1_set_modalias (BluezDevice1 *object, const gchar *value);

const gchar *bluez_device1_get_adapter (BluezDevice1 *object);
gchar *bluez_device1_dup_adapter (BluezDevice1 *object);
void bluez_device1_set_adapter (BluezDevice1 *object, const gchar *value);

GVariant *bluez_device1_get_manufacturer_data (BluezDevice1 *object);
GVariant *bluez_device1_dup_manufacturer_data (BluezDevice1 *object);
void bluez_device1_set_manufacturer_data (BluezDevice1 *object, GVariant *value);

GVariant *bluez_device1_get_service_data (BluezDevice1 *object);
GVariant *bluez_device1_dup_service_data (BluezDevice1 *object);
void bluez_device1_set_service_data (BluezDevice1 *object, GVariant *value);

gint16 bluez_device1_get_tx_power (BluezDevice1 *object);
void bluez_device1_set_tx_power (BluezDevice1 *object, gint16 value);

gboolean bluez_device1_get_services_resolved (BluezDevice1 *object);
void bluez_device1_set_services_resolved (BluezDevice1 *object, gboolean value);


/* ---- */

#define BLUEZ_TYPE_DEVICE1_PROXY (bluez_device1_proxy_get_type ())
#define BLUEZ_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_DEVICE1_PROXY, BluezDevice1Proxy))
#define BLUEZ_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_DEVICE1_PROXY, BluezDevice1ProxyClass))
#define BLUEZ_DEVICE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_DEVICE1_PROXY, BluezDevice1ProxyClass))
#define BLUEZ_IS_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_DEVICE1_PROXY))
#define BLUEZ_IS_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_DEVICE1_PROXY))

typedef struct _BluezDevice1Proxy BluezDevice1Proxy;
typedef struct _BluezDevice1ProxyClass BluezDevice1ProxyClass;
typedef struct _BluezDevice1ProxyPrivate BluezDevice1ProxyPrivate;

struct _BluezDevice1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BluezDevice1ProxyPrivate *priv;
};

struct _BluezDevice1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_device1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezDevice1Proxy, g_object_unref)
#endif

void bluez_device1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezDevice1 *bluez_device1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BluezDevice1 *bluez_device1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_device1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezDevice1 *bluez_device1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BluezDevice1 *bluez_device1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_TYPE_DEVICE1_SKELETON (bluez_device1_skeleton_get_type ())
#define BLUEZ_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_DEVICE1_SKELETON, BluezDevice1Skeleton))
#define BLUEZ_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_DEVICE1_SKELETON, BluezDevice1SkeletonClass))
#define BLUEZ_DEVICE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_DEVICE1_SKELETON, BluezDevice1SkeletonClass))
#define BLUEZ_IS_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_DEVICE1_SKELETON))
#define BLUEZ_IS_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_DEVICE1_SKELETON))

typedef struct _BluezDevice1Skeleton BluezDevice1Skeleton;
typedef struct _BluezDevice1SkeletonClass BluezDevice1SkeletonClass;
typedef struct _BluezDevice1SkeletonPrivate BluezDevice1SkeletonPrivate;

struct _BluezDevice1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BluezDevice1SkeletonPrivate *priv;
};

struct _BluezDevice1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_device1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezDevice1Skeleton, g_object_unref)
#endif

BluezDevice1 *bluez_device1_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_BLUEZ_DEVICE1_H__ */
