/*
 * Generated by gdbus-codegen 2.54.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_BLUEZ_GATTMANAGER1_H__
#define __ORG_BLUEZ_GATTMANAGER1_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattManager1 */

#define BLUEZ_TYPE_GATT_MANAGER1 (bluez_gatt_manager1_get_type ())
#define BLUEZ_GATT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_GATT_MANAGER1, BluezGattManager1))
#define BLUEZ_IS_GATT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_GATT_MANAGER1))
#define BLUEZ_GATT_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_TYPE_GATT_MANAGER1, BluezGattManager1Iface))

struct _BluezGattManager1;
typedef struct _BluezGattManager1 BluezGattManager1;
typedef struct _BluezGattManager1Iface BluezGattManager1Iface;

struct _BluezGattManager1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_application) (
    BluezGattManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_application,
    GVariant *arg_options);

  gboolean (*handle_unregister_application) (
    BluezGattManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_application);

};

GType bluez_gatt_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_gatt_manager1_interface_info (void);
guint bluez_gatt_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_gatt_manager1_complete_register_application (
    BluezGattManager1 *object,
    GDBusMethodInvocation *invocation);

void bluez_gatt_manager1_complete_unregister_application (
    BluezGattManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_gatt_manager1_call_register_application (
    BluezGattManager1 *proxy,
    const gchar *arg_application,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_gatt_manager1_call_register_application_finish (
    BluezGattManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_gatt_manager1_call_register_application_sync (
    BluezGattManager1 *proxy,
    const gchar *arg_application,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void bluez_gatt_manager1_call_unregister_application (
    BluezGattManager1 *proxy,
    const gchar *arg_application,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_gatt_manager1_call_unregister_application_finish (
    BluezGattManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_gatt_manager1_call_unregister_application_sync (
    BluezGattManager1 *proxy,
    const gchar *arg_application,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BLUEZ_TYPE_GATT_MANAGER1_PROXY (bluez_gatt_manager1_proxy_get_type ())
#define BLUEZ_GATT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_GATT_MANAGER1_PROXY, BluezGattManager1Proxy))
#define BLUEZ_GATT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_GATT_MANAGER1_PROXY, BluezGattManager1ProxyClass))
#define BLUEZ_GATT_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_GATT_MANAGER1_PROXY, BluezGattManager1ProxyClass))
#define BLUEZ_IS_GATT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_GATT_MANAGER1_PROXY))
#define BLUEZ_IS_GATT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_GATT_MANAGER1_PROXY))

typedef struct _BluezGattManager1Proxy BluezGattManager1Proxy;
typedef struct _BluezGattManager1ProxyClass BluezGattManager1ProxyClass;
typedef struct _BluezGattManager1ProxyPrivate BluezGattManager1ProxyPrivate;

struct _BluezGattManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BluezGattManager1ProxyPrivate *priv;
};

struct _BluezGattManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_gatt_manager1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezGattManager1Proxy, g_object_unref)
#endif

void bluez_gatt_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezGattManager1 *bluez_gatt_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BluezGattManager1 *bluez_gatt_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_gatt_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezGattManager1 *bluez_gatt_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BluezGattManager1 *bluez_gatt_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_TYPE_GATT_MANAGER1_SKELETON (bluez_gatt_manager1_skeleton_get_type ())
#define BLUEZ_GATT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_GATT_MANAGER1_SKELETON, BluezGattManager1Skeleton))
#define BLUEZ_GATT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_GATT_MANAGER1_SKELETON, BluezGattManager1SkeletonClass))
#define BLUEZ_GATT_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_GATT_MANAGER1_SKELETON, BluezGattManager1SkeletonClass))
#define BLUEZ_IS_GATT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_GATT_MANAGER1_SKELETON))
#define BLUEZ_IS_GATT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_GATT_MANAGER1_SKELETON))

typedef struct _BluezGattManager1Skeleton BluezGattManager1Skeleton;
typedef struct _BluezGattManager1SkeletonClass BluezGattManager1SkeletonClass;
typedef struct _BluezGattManager1SkeletonPrivate BluezGattManager1SkeletonPrivate;

struct _BluezGattManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BluezGattManager1SkeletonPrivate *priv;
};

struct _BluezGattManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_gatt_manager1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezGattManager1Skeleton, g_object_unref)
#endif

BluezGattManager1 *bluez_gatt_manager1_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_BLUEZ_GATTMANAGER1_H__ */
