/*
 * Generated by gdbus-codegen 2.54.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_BLUEZ_ADAPTER1_H__
#define __ORG_BLUEZ_ADAPTER1_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Adapter1 */

#define BLUEZ_TYPE_ADAPTER1 (bluez_adapter1_get_type ())
#define BLUEZ_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_ADAPTER1, BluezAdapter1))
#define BLUEZ_IS_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_ADAPTER1))
#define BLUEZ_ADAPTER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_TYPE_ADAPTER1, BluezAdapter1Iface))

struct _BluezAdapter1;
typedef struct _BluezAdapter1 BluezAdapter1;
typedef struct _BluezAdapter1Iface BluezAdapter1Iface;

struct _BluezAdapter1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_connect_device) (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gboolean (*handle_get_discovery_filters) (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_device) (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_set_discovery_filter) (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_filter);

  gboolean (*handle_start_discovery) (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_discovery) (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_address) (BluezAdapter1 *object);

  const gchar * (*get_address_type) (BluezAdapter1 *object);

  const gchar * (*get_alias) (BluezAdapter1 *object);

  guint  (*get_class) (BluezAdapter1 *object);

  gboolean  (*get_discoverable) (BluezAdapter1 *object);

  guint  (*get_discoverable_timeout) (BluezAdapter1 *object);

  gboolean  (*get_discovering) (BluezAdapter1 *object);

  const gchar * (*get_modalias) (BluezAdapter1 *object);

  const gchar * (*get_name) (BluezAdapter1 *object);

  gboolean  (*get_pairable) (BluezAdapter1 *object);

  guint  (*get_pairable_timeout) (BluezAdapter1 *object);

  gboolean  (*get_powered) (BluezAdapter1 *object);

  const gchar *const * (*get_uuids) (BluezAdapter1 *object);

};

GType bluez_adapter1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_adapter1_interface_info (void);
guint bluez_adapter1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_adapter1_complete_start_discovery (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void bluez_adapter1_complete_stop_discovery (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void bluez_adapter1_complete_remove_device (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void bluez_adapter1_complete_set_discovery_filter (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void bluez_adapter1_complete_get_discovery_filters (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *filters);

void bluez_adapter1_complete_connect_device (
    BluezAdapter1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_adapter1_call_start_discovery (
    BluezAdapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_adapter1_call_start_discovery_finish (
    BluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_adapter1_call_start_discovery_sync (
    BluezAdapter1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_adapter1_call_stop_discovery (
    BluezAdapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_adapter1_call_stop_discovery_finish (
    BluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_adapter1_call_stop_discovery_sync (
    BluezAdapter1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_adapter1_call_remove_device (
    BluezAdapter1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_adapter1_call_remove_device_finish (
    BluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_adapter1_call_remove_device_sync (
    BluezAdapter1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GError **error);

void bluez_adapter1_call_set_discovery_filter (
    BluezAdapter1 *proxy,
    GVariant *arg_filter,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_adapter1_call_set_discovery_filter_finish (
    BluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_adapter1_call_set_discovery_filter_sync (
    BluezAdapter1 *proxy,
    GVariant *arg_filter,
    GCancellable *cancellable,
    GError **error);

void bluez_adapter1_call_get_discovery_filters (
    BluezAdapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_adapter1_call_get_discovery_filters_finish (
    BluezAdapter1 *proxy,
    gchar ***out_filters,
    GAsyncResult *res,
    GError **error);

gboolean bluez_adapter1_call_get_discovery_filters_sync (
    BluezAdapter1 *proxy,
    gchar ***out_filters,
    GCancellable *cancellable,
    GError **error);

void bluez_adapter1_call_connect_device (
    BluezAdapter1 *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_adapter1_call_connect_device_finish (
    BluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_adapter1_call_connect_device_sync (
    BluezAdapter1 *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *bluez_adapter1_get_address (BluezAdapter1 *object);
gchar *bluez_adapter1_dup_address (BluezAdapter1 *object);
void bluez_adapter1_set_address (BluezAdapter1 *object, const gchar *value);

const gchar *bluez_adapter1_get_address_type (BluezAdapter1 *object);
gchar *bluez_adapter1_dup_address_type (BluezAdapter1 *object);
void bluez_adapter1_set_address_type (BluezAdapter1 *object, const gchar *value);

const gchar *bluez_adapter1_get_name (BluezAdapter1 *object);
gchar *bluez_adapter1_dup_name (BluezAdapter1 *object);
void bluez_adapter1_set_name (BluezAdapter1 *object, const gchar *value);

const gchar *bluez_adapter1_get_alias (BluezAdapter1 *object);
gchar *bluez_adapter1_dup_alias (BluezAdapter1 *object);
void bluez_adapter1_set_alias (BluezAdapter1 *object, const gchar *value);

guint bluez_adapter1_get_class (BluezAdapter1 *object);
void bluez_adapter1_set_class (BluezAdapter1 *object, guint value);

gboolean bluez_adapter1_get_powered (BluezAdapter1 *object);
void bluez_adapter1_set_powered (BluezAdapter1 *object, gboolean value);

gboolean bluez_adapter1_get_discoverable (BluezAdapter1 *object);
void bluez_adapter1_set_discoverable (BluezAdapter1 *object, gboolean value);

gboolean bluez_adapter1_get_pairable (BluezAdapter1 *object);
void bluez_adapter1_set_pairable (BluezAdapter1 *object, gboolean value);

guint bluez_adapter1_get_pairable_timeout (BluezAdapter1 *object);
void bluez_adapter1_set_pairable_timeout (BluezAdapter1 *object, guint value);

guint bluez_adapter1_get_discoverable_timeout (BluezAdapter1 *object);
void bluez_adapter1_set_discoverable_timeout (BluezAdapter1 *object, guint value);

gboolean bluez_adapter1_get_discovering (BluezAdapter1 *object);
void bluez_adapter1_set_discovering (BluezAdapter1 *object, gboolean value);

const gchar *const *bluez_adapter1_get_uuids (BluezAdapter1 *object);
gchar **bluez_adapter1_dup_uuids (BluezAdapter1 *object);
void bluez_adapter1_set_uuids (BluezAdapter1 *object, const gchar *const *value);

const gchar *bluez_adapter1_get_modalias (BluezAdapter1 *object);
gchar *bluez_adapter1_dup_modalias (BluezAdapter1 *object);
void bluez_adapter1_set_modalias (BluezAdapter1 *object, const gchar *value);


/* ---- */

#define BLUEZ_TYPE_ADAPTER1_PROXY (bluez_adapter1_proxy_get_type ())
#define BLUEZ_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_ADAPTER1_PROXY, BluezAdapter1Proxy))
#define BLUEZ_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_ADAPTER1_PROXY, BluezAdapter1ProxyClass))
#define BLUEZ_ADAPTER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_ADAPTER1_PROXY, BluezAdapter1ProxyClass))
#define BLUEZ_IS_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_ADAPTER1_PROXY))
#define BLUEZ_IS_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_ADAPTER1_PROXY))

typedef struct _BluezAdapter1Proxy BluezAdapter1Proxy;
typedef struct _BluezAdapter1ProxyClass BluezAdapter1ProxyClass;
typedef struct _BluezAdapter1ProxyPrivate BluezAdapter1ProxyPrivate;

struct _BluezAdapter1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BluezAdapter1ProxyPrivate *priv;
};

struct _BluezAdapter1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_adapter1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezAdapter1Proxy, g_object_unref)
#endif

void bluez_adapter1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezAdapter1 *bluez_adapter1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BluezAdapter1 *bluez_adapter1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_adapter1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezAdapter1 *bluez_adapter1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BluezAdapter1 *bluez_adapter1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_TYPE_ADAPTER1_SKELETON (bluez_adapter1_skeleton_get_type ())
#define BLUEZ_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_ADAPTER1_SKELETON, BluezAdapter1Skeleton))
#define BLUEZ_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_ADAPTER1_SKELETON, BluezAdapter1SkeletonClass))
#define BLUEZ_ADAPTER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_ADAPTER1_SKELETON, BluezAdapter1SkeletonClass))
#define BLUEZ_IS_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_ADAPTER1_SKELETON))
#define BLUEZ_IS_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_ADAPTER1_SKELETON))

typedef struct _BluezAdapter1Skeleton BluezAdapter1Skeleton;
typedef struct _BluezAdapter1SkeletonClass BluezAdapter1SkeletonClass;
typedef struct _BluezAdapter1SkeletonPrivate BluezAdapter1SkeletonPrivate;

struct _BluezAdapter1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BluezAdapter1SkeletonPrivate *priv;
};

struct _BluezAdapter1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_adapter1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezAdapter1Skeleton, g_object_unref)
#endif

BluezAdapter1 *bluez_adapter1_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_BLUEZ_ADAPTER1_H__ */
