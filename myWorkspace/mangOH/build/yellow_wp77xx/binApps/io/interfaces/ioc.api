//--------------------------------------------------------------------------------------------------
/**
 * @page c_ioc IO Connector API
 *
 * TBD
 *
 * Clients register a callback to be called when a change in IO configuration occurs.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * Buffer structure for returning device information
 *
 * As of Legato 18.10, the IDL does not support the STRUCT or UNION directives.  The DEFINEs
 * below ensure that the buffer passed by IoConfigGet is large enough to be cast to a
 * ioc_DeviceInfo_t structure.  See iocClient.h
 */
//--------------------------------------------------------------------------------------------------
DEFINE STRING_DEVICE_LABEL_LEN_MAX =  31;
DEFINE STRING_DEVICE_PATH_LEN_MAX  = 127;
DEFINE STRING_DEVICE_OWNER_LEN_MAX =  31;
DEFINE STRUCT_DEVICE_INFO_LEN_MAX  = (  STRING_DEVICE_LABEL_LEN_MAX
                                      + STRING_DEVICE_PATH_LEN_MAX
                                      + STRING_DEVICE_OWNER_LEN_MAX
                                      + 32);  // remainder of structure ioc_DeviceInfo_t
DEFINE IPV4_ADDRESS_STRING_LEN_MAX =  16;

//--------------------------------------------------------------------------------------------------
/**
 * Device state used in notification callbacks
 *
 * As of Legato 18.10, the IDL does not support the STRUCT or UNION directives.  The DEFINEs
 * below ensure that the buffer passed by IoConfigGet is large enough to be cast to a
 * ioc_DeviceInfo_t structure.  See iocClient.h
 */
//--------------------------------------------------------------------------------------------------
ENUM IoConfigState
{
    CONFIG_STATE_PENDING,
    CONFIG_STATE_READY
};


//--------------------------------------------------------------------------------------------------
/**
 * Fetch the current state of a device
 *
 * @return
 *  - LE_OK if successful.
 *  - LE_NOT_FOUND if the device does not exist
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t IoConfigGet
(
    string devName[STRING_DEVICE_LABEL_LEN_MAX] IN, ///< Common name of IO device
    uint8  devInfo[STRUCT_DEVICE_INFO_LEN_MAX] OUT  ///< Container for device information
);


//--------------------------------------------------------------------------------------------------
/**
 * Callback function receive notifications about IO configuration changes
 */
//--------------------------------------------------------------------------------------------------
HANDLER IoConfigChangeHandler
(
    IoConfigState state IN                          ///< Configuration state
);


//--------------------------------------------------------------------------------------------------
/**
 * Causes AddIoConfigChangeHandler() and RemoveIoConfigChangeHandler() functions to be generated
 * by the build tools
 *
 * @return
 *  - Handler refernce, if successful
 */
//--------------------------------------------------------------------------------------------------
EVENT IoConfigChange
(
    string devName[STRING_DEVICE_LABEL_LEN_MAX] IN, ///< Common name of IO device
    IoConfigChangeHandler callback                  ///< Client callback
);


//--------------------------------------------------------------------------------------------------
/**
 * Function to update linux firewall to control inbound TCP traffic from this host:port.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION EthernetAllowInboudTcpTraffic
(
    string ipAddress[IPV4_ADDRESS_STRING_LEN_MAX] IN, ///< IP address of the remote host to allow traffic from
    uint32 port IN,                                   ///< TCP port the remote host will use to send data from
    bool allow IN                                     ///< Allow / disallow inbound traffic
);