/**
 * Router API for:
 * - manage the S&F : force persistence, dump stored data points or event
 * - register handlers to know when there is data to transmit.
 */

//--------------------------------------------------------------------------------------------------

DEFINE STORE_FORWARD_LEVEL_ENABLE_PATH = "store_forward/level/enable";
DEFINE STORE_FORWARD_LEVEL_PERIOD_PATH = "store_forward/level/period";
DEFINE STORE_FORWARD_LEVEL_VALUE_PATH = "store_forward/level/value";

DEFINE OBSNAME_MAX = 100;
DEFINE OBSPATH_MAX = 200;

DEFINE SERIES_MAX = 100;

// use FD on WP77(6)?
DEFINE ENCODED_EVENT_MAX_SIZE = 50000;
DEFINE STR_VAL_MAX_SIZE = 50000;

FUNCTION le_result_t AddObservationToCloud(
    string obsName[OBSNAME_MAX] IN,///< name of the observation
    string path[OBSPATH_MAX] IN,///< path of the observed resource
    string jsonExtract[OBSNAME_MAX] IN,///< Json extraction path or empty if we observe the full resource
    bool store IN///< to store, or to trigger a communication immediately
);

FUNCTION le_result_t RemoveObservationToCloud(
    string path[OBSPATH_MAX] IN///< path of the observed resource
);

FUNCTION bool IsEmpty();

/*
 * Save the current store to flash
 */
FUNCTION le_result_t Persist();

//----------------------------------------------------------------------------------------
/**
* This function retrieves and encode a event data from the list in a cbor buffer
* (no data deletion, made by RemoveEvent)
*
* @return
*  - LE_OK on success
*  - LE_NO_MEMORY if provided buffer size was not enough to perform encoding
*  - LE_FAULT if an unexpected encoding error occurs
*/
//-----------------------------------------------------------------------------------------
FUNCTION le_result_t GetEvent(
    uint8 buffer[ENCODED_EVENT_MAX_SIZE] OUT,   ///< pointer to the buffer to use for encoding
    bool isLastEvent OUT                        ///< set to True if no more event in store, false otherwise
);

STRUCT Serie
{
    string path[OBSPATH_MAX];
    string obsName[OBSNAME_MAX];
};

ENUM Type
{
    INT,
    DOUBLE,
    BOOL,
    STRING,
    JSON
};

FUNCTION ListSeries(Serie series[SERIES_MAX] OUT);

//----------------------------------------------------------------------------------------
/**
* Encode a DataPoint into a cbor buffer
* This function retrieves a data point data from the serie and encode it into a cbor buffer
* (no data deletion, made by RemoveDataPoint)
*
* @return
*  - LE_OK on success
*  - LE_NO_MEMORY if provided buffer size was not enough to perform encoding
*  - LE_FAULT if an unexpected encoding error occurs
*/
//-----------------------------------------------------------------------------------------
FUNCTION le_result_t GetDataPoint(
    string serieName[OBSPATH_MAX] IN,   ///< Name of serie to retrieve point from
    string obsName[OBSNAME_MAX] IN,     ///< Name of observation to retrieve point from
    uint8 buffer[STR_VAL_MAX_SIZE] OUT, ///< pointer to the buffer to use for encoding
    bool isLastPoint OUT                ///< set to True if no more point in serie, false otherwise
);

//----------------------------------------------------------------------------------------
/**
* Remove all data points marked as being sent from the store and forward.
* This also removes series from store and forward if they contain no more points.
*/
//-----------------------------------------------------------------------------------------
FUNCTION RemoveDataPoint();

//----------------------------------------------------------------------------------------
/**
* Remove all events marked as being sent from the store and forward.
*/
//-----------------------------------------------------------------------------------------
FUNCTION RemoveEvent();

//----------------------------------------------------------------------------------------
/**
* Reset flag marking events as being sent from all events in the store and forward.
*/
//-----------------------------------------------------------------------------------------
FUNCTION ResetSendingEvent();

//----------------------------------------------------------------------------------------
/**
* Reset flag marking data points as being sent from all points in the store and forward.
*/
//-----------------------------------------------------------------------------------------
FUNCTION ResetSendingDataPoint();

//----------------------------------------------------------------------------------------
/**
* Remove all events and data points (thus also removing series) from 
* the store and forward wheter they are marked as being sent or not.
*/
//-----------------------------------------------------------------------------------------
FUNCTION Clear();

//----------------------------------------------------------------------------------------
/**
* Reset internal Store & Forward reference values used to perform delta encoding
* of series data points value.
*/
//-----------------------------------------------------------------------------------------
FUNCTION ResetEncodingDeltas();

//----------------------------------------------------------------------------------------
/**
* Encode a standalone DataPoint into a cbor buffer
* This function retrieves a standalone data point data and encode it into a cbor buffer
* (no data deletion, made by RemoveDataPoint)
*
* @return
*  - LE_OK on success
*  - LE_NO_MEMORY if provided buffer size was not enough to perform encoding
*  - LE_FAULT if an unexpected encoding error occurs
*/
//-----------------------------------------------------------------------------------------
FUNCTION le_result_t GetDataPointNotInSF(
    uint8 buffer[STR_VAL_MAX_SIZE] OUT  ///< pointer to the buffer to use for encoding
);

//--------------------------------------------------------------------------------------------------
/*
 * fired when the router needs to have the store flushed to the cloud
 */
HANDLER PushHandler
(
);

/*
 * Causes the AddPushHandler() and RemovePushHandler() functions
 * to be generated by the Legato build tools.
 */
//--------------------------------------------------------------------------------------------------
EVENT Push
(
    PushHandler callb
);

/*
 * Causes the AddPushWithoutFlushHandler() and RemovePushWithoutFlushHandler() functions
 * to be generated by the Legato build tools.
 */
//--------------------------------------------------------------------------------------------------
EVENT PushWithoutFlush
(
    PushHandler callb
);