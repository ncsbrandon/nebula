DEFINE WIFI_BSSID_BYTES = 6;
DEFINE WIFI_SSID_MAX_BYTES = 32;

//--------------------------------------------------------------------------------------------------
/**
 * An opaque object for a location request.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE LocReqHandle;

//--------------------------------------------------------------------------------------------------
/**
 * Creates a location request object in the service.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION LocReqHandle CreateLocationRequest();

//--------------------------------------------------------------------------------------------------
/**
 * Append information about one WiFi access point to the request object
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AppendWifiAccessPoint
(
    LocReqHandle handle IN,             ///< Handle from CreateLocationRequest()
    uint8 bssid[WIFI_BSSID_BYTES] IN,   ///< BSSID of the WiFi AP.  Must be exactly 6 bytes.
    uint8 ssid[WIFI_SSID_MAX_BYTES] IN, ///< SSID of the WiFi AP. Not necessarily a string. Do not
                                        ///< null terminate.
    int16 signalStrength IN             ///< Signal strength in dB.  E.g. -62.
);

ENUM CellularTech
{
    CELL_TECH_GSM,
    CELL_TECH_CDMA,
    CELL_TECH_LTE,
    CELL_TECH_WCDMA
};

FUNCTION le_result_t AppendCellTower
(
    LocReqHandle handle IN,            ///< Handle from CreateLocationRequest()
    CellularTech cellularTechnology,
    uint16 mcc,
    uint16 mnc,                       ///< Use systemId, (sid) for CDMA
    uint32 lac,                       ///< Network id for CDMA
    uint32 cellId,                    ///< Basestation Id for CDMAj
    int32 signalStrength              ///< Signal strength in dBm
);


//--------------------------------------------------------------------------------------------------
/**
 * Result type that is passed to the callback when after submitting a request
 */
//--------------------------------------------------------------------------------------------------
ENUM Result
{
    RESULT_SUCCESS,
    RESULT_ERROR,
    RESULT_RESPONSE_PARSE_FAILURE,
    RESULT_COMMUNICATION_FAILURE,
};

//--------------------------------------------------------------------------------------------------
/**
 * Handler that will be called when a result of a request is available
 */
//--------------------------------------------------------------------------------------------------
HANDLER LocationResultHandler
(
    LocReqHandle handle, ///< Handle of the request
    Result result        ///< What type of result is available
);

//--------------------------------------------------------------------------------------------------
/**
 * Submits the location request to the Combain server for processing.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SubmitLocationRequest
(
    LocReqHandle handle IN,              ///< Handle of the request to submit
    LocationResultHandler resultHandler  ///< Handler that will be called on completion of the
                                         ///< request if this function returns LE_OK
);

//--------------------------------------------------------------------------------------------------
/**
 * Destroys a previously created request freeing the resources allocated in the service. Note that
 * the GetSuccessResponse() and GetErrorResponse() functions implicitly destroy the request, so
 * calling this function is only necessary if the client decides not to submit the request after
 * creating it or decides not to retrieve the response.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DestroyLocationRequest
(
    LocReqHandle handle IN  ///< Handle of the request to destroy
);

//--------------------------------------------------------------------------------------------------
/**
 * Gets the response data from a successfully completed request. Note that the request is implicitly
 * destroyed by calling this function.
 *
 * @return LE_OK on success. If the result is not LE_OK, the content of the out parameters is
 *         undefined.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSuccessResponse
(
    LocReqHandle handle IN,
    double latitude OUT,
    double longitude OUT,
    double accuracyInMeters OUT 
    // TODO: geoname, address fallback?
);

//--------------------------------------------------------------------------------------------------
/**
 * Gets the response data from a request which failed to complete. Note that the request is
 * implicitly destroyed by calling this function.
 *
 * @return LE_OK on success. If the result is not LE_OK, the content of the out parameters is
 *         undefined.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetErrorResponse
(
    LocReqHandle handle IN,
    string firstDomain[64] OUT,
    string firstReason[64] OUT,
    string firstMessage[128] OUT,
    uint16 code OUT,
    string message[128] OUT 
);

//--------------------------------------------------------------------------------------------------
/**
 * Gets the unparsed data from a parse failure result
 *
 * @return LE_OK on success. If the result is not LE_OK, the content of the out parameter is
 *         undefined.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetParseFailureResult
(
    LocReqHandle handle IN,
    string unparsedResponse[256] OUT
);

//--------------------------------------------------------------------------------------------------
/**
 * Is the Combain service available?
 *
 * @return true/false
 *         
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool ServiceAvailable();
